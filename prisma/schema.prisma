// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model FlashCard {
    id          String @id @default(cuid())
    word        String
    translation String

    // Relations
    setId String
    set   FlashCardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attributes
    @@map("flashcards")
}

enum Privacy {
    PUBLIC
    PRIVATE
    UNLISTED
}

model FlashCardSet {
    id          String  @id @default(cuid())
    name        String
    description String
    thumbnail   String?

    // Relations
    privacy    Privacy     @default(PUBLIC)
    flashCards FlashCard[]
    categoryId String
    category   Category    @relation(fields: [categoryId], references: [id])
    ownerId    String
    history    History[]

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attributes
    @@index([ownerId])
    @@map("flashcard_sets")
}

model History {
    id String @id @default(cuid())

    // Relations
    userId String
    setId  String
    set    FlashCardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attributes
    @@index([userId])
    @@map("histories")
}

model Category {
    id   String @id @default(cuid())
    name String @unique

    // Relations
    sets FlashCardSet[]

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attributes
    @@map("categories")
}
